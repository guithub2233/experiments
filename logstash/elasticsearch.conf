input { 
  stdin { }
}

filter {
  multiline {
    pattern => "^\[%{TIMESTAMP_ISO8601:timestamp}\]"
    negate => true
    what => previous
  }

  grok {
    match => { "message" => "^\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{WORD:loglevel} *\]\[(?<component>[^ ]+) *\] \[(?<node>[^\]]+)\]+%{DATA:message}$" }
    overwrite => "message"
  }

  if [message] =~ /^ *\[gc\]/ {
    # Grok these 'gc' log messages...
    add_tag => "gc"
  }

 [gc][young][9175][639] duration [2.2s], collections [1]/[3.2s], total [2.2s]/[29.4s], memory [15.8gb]->[16.7gb]/[29.8gb], all_pools {[young] [222.1mb]->[362.5mb]/[1.4gb]}{[survivor] [43.1mb]->[191.3mb]/[191.3mb]}{[old] [15.6gb]->[16.2gb]/[28.1gb]}
                #gc.name()
                seq
                gc.collectionCount()
                TimeValue.timeValueMillis(collectionTime)
                collections
                TimeValue.timeValueMillis(currentJvmStats.timestamp() - lastJvmStats.timestamp())
                TimeValue.timeValueMillis(collectionTime)
                gc.collectionTime()
                lastJvmStats.mem().heapUsed()
                currentJvmStats.mem().heapUsed()
                JvmInfo.jvmInfo().mem().heapMax()
                buildPools(lastJvmStats
                currentJvmStats));
    match -> { "message" => "[gc][%{][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}"
  }


  date {
    match => [ "timestamp", "YYYY-MM-dd HH:mm:ss,SSS" ]
    remove_field => "timestamp"
  }
}

output {
  stdout { codec => dots }
  elasticsearch {
    protocol => http
    host => localhost
  }
  #stdout { codec => rubydebug }
}
