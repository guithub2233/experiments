* intro

* log problem: access
* log problem: consumption 
* log problem: curation
* log problem: compliance
* log problem: tooling

* Case Study: Email at DreamHost
  * Email problems?
    * Customer files ticket "I'm not getting my mail!"
    * Customer Support needs access
    * Operations has access and control.

  * logstash + DreamHost values 
    * Provide Superhero Service
    * Empower People
      logstash empowers Customer Support to further
      provide superhero service.
    (not all values listed!)
    link to: http://dreamhost.com/about-us/dreamhost-values/

  * Customer: "I'm not getting my mail!"

  * previous solution: 
    * access: Ops gives Customer Support ssh access
    * tooling: scripts ssh+grep hundreds of servers
    * curation: 100GB of logs per day
    * problem: takes *many minutes* to search today's logs.
    * problem: much longer if your event happened yesterday.

  * previous solution
    * slow tools == slower support staff
    * reduced support efficiency due to bad tooling

  * new solution:
    * centralized log collection with logstash
    * hundreds of servers ship logs to one cluster
    * provide single search interface on the web

  * results:
    * search results in seconds, not minutes
    * search specific time spans, not just "today" or "yesterday"
    * happier, faster customer support folks

  * "by an order of awesome" 
    * Support staff commenting on logstash compared to previous solution.

  * implementation details
    * mail logs only
    * 600-ish servers shipping logs with lumberjack
    * 7-node logstash+elasticsearch cluster
    * each node: 8 cores, 4TB, 16GB

  * rough numbers
    * peak 10,000 events/second
    * average 500,000,000 events/day
    * average 4,000,000,000 billion events/week
    * average 1 terabyte/week
    * average 10% cpu utilization across cluster

  * capacity options
    * retention: 1TB/week == roughly 150 days
    * cpu usage: can process 10x higher event rates 
    
* logstash
  * pipeline and ecosystem
  * filters
    * common: grok, multiline, date
    * manipulate: mutate, anonymize, urldecode
    * improve events: geoip, useragent
  * transports
    * redis, zeromq, stomp, irc, xmpp, rabbitmq, websocket
  * metrics outputs
    * graphite, ganglia, opentsdb, datadog, librato, circonus, boundary, riemann
  * storage outputs:
    * elasticsearch, file, mongodb, redis, riak
  * monitoring outputs:
    * nagios, pagerduty, zabbix, 
  * examples:
    * apache (show before/after)
    * mysql (show before/after)
    * syslog (show before/after)
  * extendable (>100 plugins)

* community
  * newbies have a bad time? It's a bug.
  * communication: irc, mailing list
  * book: http://www.logstashbook.com/
  * tips/tricks: http://cookbook.logstash.net/
  * extra goodness: kibana, logstash-cli, puppet 

* project metrics
  * 18000 unique monthly visitors to logstash.net 
  * 537 users on logstash.jira.com
  * 275 chatters in IRC
  * 134 code contributors

**** DETAILED SECTIONS
  * log problem: access
    * ops has root, thus has access, 
    * restricted access:
      * infosec policy restricts it
      * infrastructure has limited access control
    * customer support needs it.
    * devs need it
    * sales needs it
    * finance needs it

  * log problem: software providers
    * 'log manuals'
    * no consistency

  * log problem: consumption
    * expert knowledge required to understand logs
    * unknown structure
    * crazy timestamps
    * examples:
      * apache
      * mysql
      * syslog
      * dmesg
      * nagios

  * log problem: curation
    * where to put logs?
    * how long do you need to keep them?
    * in what form should you keep them?

  * log problem: compliance
    * PCI (take credit cards?)
    * Sarbanes-Oxley (public companies)
    * FISMA (federal agencies)
    * HIPAA (health industry)
    (all examples are US-based)
    (these generally affect access and curation)

  * log problem: tooling
    * too specialized: webalizer, analog
    * limited interfaces: only reports
